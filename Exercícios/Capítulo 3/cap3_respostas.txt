# 3.1
a) append(L1, [_, _, _], L).
b) append([_, _, _], L1, L),
   append(L2, [_, _, _], L1).

# 3.2
a) last(Item, List):- append(_, [Item], List).
b) last(Item, [Item]).
   last(Item, [Head | Tail]):- last(Item, Tail).

# 3.3
evenlength([]).
evenlength([X|Y]):- oddlength(Y).

oddlength([_]).
oddlength([X|Y]): evenlength(Y).

# 3.4
reverse([], []).
reverse([First|Rest], ReversedList):-
	append(ReversedRest, [First], ReversedList),
	reverse(Rest, ReversedRest).

# 3.5
palindrome(List):- reverse(List, List).

# 3.6
shift([Head|Tail], Shifted):- append(Tail, [Head], Shifted).

# 3.7
translate([Head1|Tail1], [Head2|Tail2]):-
	means(Head1, Head2),
	translate(Tail1, Tail2).

# 3.8
subset([], []).
subset([X|L], [X|L1]):- subset(L, L1).
subset([X|L], L1):- subset(L, L1).

# 3.9
dividelist([], [], []).
dividelist([X], [X], []).
dividelist([X, Y| List], [X|List1], [Y|List2]):- dividelist(List, List1, List2).

# 3.11
% Sem o cut => produz ruído
flatten([Head | Tail], FlatList):-
	flatten(Head, FlatHead),
	flatten(Tail, FlatTail),
	append(FlatHead, FlatTail, FlatList).
flatten([], []).
flatten(X, [X]).

% Com o cut => retorna apenas a primeira resposta, que é a correta
flatten([], []).
flatten([Head | Tail], FlatList):-
	flatten(Head, FlatHead),
	flatten(Tail, FlatTail), !,
	append(FlatHead, FlatTail, FlatList).
flatten([], []).
flatten(X, [X]).

# 3.16
max(X, Y, X):- X >= Y.
max(X, Y, Y):- X < Y.

# 3.17
maxlist([X], X).
maxlist([X, Y | Tail], Max):-
	maxlist([Y | Tail], MaxTail),
	max(X, MaxTail, Max).

# 3.18
sumlist([], 0).
sumlist([Head|Tail], Sum):-
	sumlist(Tail, Rest),
	Sum is Head + Rest.

# 3.19
ordered([X, Y|Tail]):-
	X =< Y,
	ordered(Y|Tail).

# 3.20
soma([], 0, []).

% Elemento X está na sublista
soma([X | L], N, [X | L1]):-
	N1 is (N - X),
	N1 >= 0,
	soma(L, N1, L1).

% Elemento X não está na sublista
soma([X | L], N, L):-
	soma(L, N, L1).

# 3.21
between(N1, N2, N1):- N1 =< N2.
between(N1, N2, X):-
	N1 < N2,
	Between is N1 + 1,
	between(Between, N2, X).