# 1
Espaço de estados:
	- 1: jarra 1 cheia
	- 2: jarra 1 vazia
	- 3: jarra 2 cheia
	- 4: jarra 2 vazia
	- 5: jarra 1 com 2 litros

Estado inicial: Ambas as jarras vazias = {2, 4}

Estado final: Jarra 1 com 2 litros e jarra 2 vazia = {4, 5}

Regras:
	- R1: encher jarra 1
	- R2: encher jarra 2
	- R3: esvaziar jarra 1
	- R4: esvaziar jarra 2
	- R5: transferir conteúdo da jarra 1 para a jarra 2
	- R6: transferir conteúdo da jarra 2 para a jarra 1

Custo: 1 para cada ação
Custo total: 7
Solução: R1 {4, 0} -> R5 {1, 3} -> R4 {1, 0} -> R5 {0, 1} -> R1 {4, 1} -> R5 {2, 3} -> R4 {2, 0}


# 2
a)
Espaço de estados:

 * Margem de origem
	- 1:  margem de origem contendo pessoa, couve, cabra e lobo
	- 2:  margem de origem contendo couve, cabra e lobo
	- 3:  margem de origem contendo pessoa, couve e cabra
	- 4:  margem de origem contendo pessoa, cabra e lobo
	- 5:  margem de origem contendo pessoa, couve e lobo
	- 6:  margem de origem contendo pessoa e couve
	- 7:  margem de origem contendo pessoa e cabra
	- 8:  margem de origem contendo pessoa e lobo
	- 9:  margem de origem contendo couve e lobo
	- 10: margem de origem contendo pessoa
	- 11: margem de origem contendo couve
	- 12: margem de origem contendo cabra
	- 13: margem de origem contendo lobo
	- 14: margem de origem vazia

 * Margem oposta	
	- 15: margem oposta contendo pessoa, couve, cabra e lobo
	- 16: margem oposta contendo couve, cabra e lobo
	- 17: margem oposta contendo pessoa, couve e cabra
	- 18: margem oposta contendo pessoa, cabra e lobo
	- 19: margem oposta contendo pessoa, couve e lobo
	- 20: margem oposta contendo pessoa e couve
	- 21: margem oposta contendo pessoa e cabra
	- 22: margem oposta contendo pessoa e lobo
	- 23: margem oposta contendo couve e lobo
	- 24: margem oposta contendo pessoa
	- 25: margem oposta contendo couve
	- 26: margem oposta contendo cabra
	- 27: margem oposta contendo lobo
	- 28: margem oposta vazia

Estado inicial: {1, 28}

Estado final: {14, 15}

Regras:
	- R1: pessoa leva couve de uma margem para outra
	- R2: pessoa leva cabra de uma margem para outra
	- R3: pessoa leva lobo de uma margem para outra
	- R4: pessoa atravessa o rio sozinha

Custo: 1 para cada ação

b) A estratégia escolhida foi busca em profundidade.

c) https://github.com/RafaelxFernandes/Inteligencia-Artificial-20.2/blob/main/Listas/Lista%201%20-%20Busca%20n%C3%A3o%20informada/Inked-questao2.jpg

d) {1, 28} -> R2 {9, 21} -> R4 {5, 26} -> R1 {13, 17} -> R2 {4, 25} -> R3 {12, 19} -> R4 {7, 23} -> R2 {14, 15}


# 3
a)
Objetivo: regiões adjacentes possuem cores diferentes

Estados: Tupla com 8 posições, cada posição representando um país, e um valor numérico de 0 à 4 representando as cores, sendo 0 a região descolorida

Estado inicial: (0, 0, 0, 0, 0, 0, 0, 0)

Operadores:
	- colorir região
	- conferir se região adjacente possui mesma cor

Custo: 1 para colorir uma região e 1 para conferir se a região adjancente possui mesma cor

b) Acredito que a busca em largura foi mais eficiente, pois podemos colorir todo o nível imediatamente abaixo da região "França" com uma mesma cor, e seus filhos com outra. Enquanto na busca por profundindade, precisamos conferir a cada passo qual é a cor do ancestral, para colorirmos de outra cor.

- Largura:
https://github.com/RafaelxFernandes/Inteligencia-Artificial-20.2/blob/main/Listas/Lista%201%20-%20Busca%20n%C3%A3o%20informada/Inked-questao3-largura.jpg

Profundidade:
https://github.com/RafaelxFernandes/Inteligencia-Artificial-20.2/blob/main/Listas/Lista%201%20-%20Busca%20n%C3%A3o%20informada/Inkedquestao3-profundidade.jpg


# 4
Todas as buscas retornaram os mesmos resultados.
A busca em profundidade retornou o valor da soma da coluna antes de iniciar a soma da coluna adjacente.
Link imagem: https://github.com/RafaelxFernandes/Inteligencia-Artificial-20.2/blob/main/Listas/Lista%201%20-%20Busca%20n%C3%A3o%20informada/questao4-profundidade.png

A busca em largura retornou o valor da soma de cada coluna ao gerar o último nó das mesmas.
Link imagem: https://github.com/RafaelxFernandes/Inteligencia-Artificial-20.2/blob/main/Listas/Lista%201%20-%20Busca%20n%C3%A3o%20informada/questao4-largura.png

A busca com custo-uniforme somou e retornou os valores da soma de cada coluna na ordem da coluna com o último nó de menor valor para a de maior.
Link imagem: https://github.com/RafaelxFernandes/Inteligencia-Artificial-20.2/blob/main/Listas/Lista%201%20-%20Busca%20n%C3%A3o%20informada/questao4-custo-uniforme.png


# 5
Link imagem: https://github.com/RafaelxFernandes/Inteligencia-Artificial-20.2/blob/main/Listas/Lista%201%20-%20Busca%20n%C3%A3o%20informada/questao5.png

a) O conjunto mínimo de pontos que deve ser considerado na busca do menor caminho entre um ponto de partida e um objetivo qualquer é {1, 2, 4, 6, 15, 16, 17, 18, 20, 21}. Os pontos {1, 2, 4, 6} são os pontos que o robô consegue enxergar do seu ponto de partida. Enquanto os pontos {15, 16, 17, 18, 20, 21} são os pontos a partir dos quais o robô consegue enxergar seu objetivo.

b) O método que usaremos será de enumerar os vértices dos polígonos, e então dizer para qual vértice o robô irá se locomover.
Consideremos que o robô vai do ponto de partida para o ponto 1. Dele, ele pode se locomover para 2 ou 3.
Os sucessores para o ponto S são os pontos 1, 2, 4 e 6.	


# 6
a) Algoritmo de busca em profundidade, pois o algoritmo sorteia randomicamente uma célula vizinha que ainda não foi visitada, remove a “parede” entre estas duas células, e adiciona a nova célula a uma pilha, repetindo esse processo com a célula escolhida no último passo. Fazendo a árvore de derivação, percebemos que a árvore crescerá com base na última célula escolhida aleatoriamente.

		                        o (1/1)
					|
			    /  		|          \
		           o (2/)       o (3/2)     o (10/)
			        	|   
				/       |      \
			        o (4/3) o (8/)  o (9/)
		        	| 
			/       |       \
		       o (5/)   o (6/4)  o(7/)
		              / | \
			      .....	

b) 
1 - Escolha a célula inicial, marque-a como visitada e empurre-a para a pilha 
2 - Enquanto a pilha não está vazia Retirar uma célula da pilha e torná-la uma célula atual 
	2.1 - Se a célula atual tiver algum vizinho que não tenha sido visitado 
		2.1.1 - Empurre a célula atual para a pilha 
		2.1.2 - Escolha um dos vizinhos não visitados 
		2.1.3 - Remova a parede entre a célula atual e a célula escolhida 
		2.1.4 - Marque a célula escolhida como visitada e coloque-a na pilha


# 7
O número máximo de nós que serão gerados antes que uma solução seja encontrada: 
b + b^2 + b^3 + ... + b^d = O(b^d)

Sim, é possível obter a solução sem que todos os n vértices sejam encontrados.
Consideremos a seguinte árvore de nível 1.

		1
	/	|	\
	2	3	 4

Caso tenhamos como objetivo o ponto "4", é possível obtê-lo sem gerar os pontos "2" e "3" se iniciarmos a nossa busca da direita para a esquerda.


# 8
Para evitar loops, pontos repetidos não foram considerados.

- Largura:
https://github.com/RafaelxFernandes/Inteligencia-Artificial-20.2/blob/main/Listas/Lista%201%20-%20Busca%20n%C3%A3o%20informada/questao8-largura.png

- Profundidade:
https://github.com/RafaelxFernandes/Inteligencia-Artificial-20.2/blob/main/Listas/Lista%201%20-%20Busca%20n%C3%A3o%20informada/questao8-profundidade.png

- Profundidade com limite igual a 1:
https://github.com/RafaelxFernandes/Inteligencia-Artificial-20.2/blob/main/Listas/Lista%201%20-%20Busca%20n%C3%A3o%20informada/questao8-profundidade-limite1.png

- Custo uniforme:
https://github.com/RafaelxFernandes/Inteligencia-Artificial-20.2/blob/main/Listas/Lista%201%20-%20Busca%20n%C3%A3o%20informada/questao8-custo-uniforme.png

- Bidirecional:
https://github.com/RafaelxFernandes/Inteligencia-Artificial-20.2/blob/main/Listas/Lista%201%20-%20Busca%20n%C3%A3o%20informada/questao8-bidirecional.png


# 9
- Largura
Considerado completo para um grafo finito
Não é necessariamente ótimo
Tempo e memória (profundidade da meta = d) = O(b^d)

- Profundidade
Não é completo para árvores, mas é completo para grafos com espaço finito
Não é ótimo em ambos os casos
Complexidade temporal:
	- árvore = O(b^m), m profundidade máxima de um nó
	- grafo = limitada pelo tamanho espaço de estado
Complexidade espacial:
	- árvore = b*m
	- grafo = limitada pelo tamanho espaço de estado

- Profundidade com limite
Não é completo se l < d (d: profundidade nó meta mais raso)
Não é ótimo se l > d
Complexidade temporal e espacial: O(b^l)

- Custo uniforme
Completo
Ótimo em geral
Tempo e memória = O(b^d)

- Bidirecional
Completo
Ótimo para passos de custo uniforme
Complexidade temporal e espacial: O(b^d)